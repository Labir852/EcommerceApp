@page
@model IndexModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Home page";
}

<div class="bg-white">
    <div class="mx-auto max-w-2xl px-4 py-6 sm:px-6 lg:max-w-7xl lg:px-8">
        <!-- Top section with blue cards -->
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-3 mb-8">
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Total Products</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all products in our store</p>
                    </div>
                </div>
            </div>
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Total Vendor</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all vendors in our store</p>
                    </div>
                </div>
            </div>
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Unique Products</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all unique products</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Add Product section -->
        <div class="flex flex-col sm:flex-row justify-between items-center mb-6">
            <div class="flex items-center mt-4 sm:mt-0 w-full gap-4">
                <div class="relative w-[80%]">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                        </svg>
                    </div>
                    <input type="text" id="searchInput" class="block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-primary focus:border-primary" placeholder="Search products...">
                </div>
                <button type="button" onclick="openAddProductModal()" class="w-[20%] inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary whitespace-nowrap">
                    Add Product
                </button>
            </div>
        </div>

        <div class="text-sm text-gray-500 mb-4">
            Showing 1-9 of 100 results
        </div>

        <!-- Products grid -->
        <div id="productsGrid" class="grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:gap-x-8">
            <!-- Products will be loaded here via JavaScript -->
            <div class="text-center text-gray-500">Loading products...</div>
        </div>
        
        <!-- Pagination controls -->
        <div id="paginationContainer" class="flex items-center justify-center mt-8">
            <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                <button id="prevPage" class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed">
                    <span class="sr-only">Previous</span>
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
                    </svg>
                </button>
                <div id="paginationNumbers" class="flex">
                    <!-- Page numbers will be inserted here -->
                </div>
                <button id="nextPage" class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 disabled:opacity-50 disabled:cursor-not-allowed">
                    <span class="sr-only">Next</span>
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                    </svg>
                </button>
            </nav>
        </div>
    </div>
</div>

<!-- Add Product Modal -->
<div id="addProductModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" onclick="closeAddProductModal()"></div>

        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-xl font-semibold leading-6 text-gray-900" id="modal-title">Add New Product</h3>
                        <p class="mt-2 text-sm text-gray-500">Add Description of your new product</p>
                        <div class="mt-6">
                            <form id="addProductForm" class="space-y-6">
                                <div>
                                    <label for="productName" class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
                                    <input type="text" name="name" id="productName" placeholder="Product name" required 
                                        class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 shadow-sm focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                </div>
                                <div class="flex gap-6">
                                    <div class="w-1/2">
                                        <label for="productSlug" class="block text-sm font-medium text-gray-700 mb-2">Slug</label>
                                        <div class="relative flex rounded-md shadow-sm">
                                            <input type="text" name="slug" id="productSlug" 
                                                class="flex-1 px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out pr-10">
                                            <button type="button" 
                                                class="absolute right-2 top-1/2 -translate-y-1/2 inline-flex items-center px-3 py-1.5 rounded-full bg-primary text-white text-sm hover:bg-blue-700 transition duration-150 ease-in-out">
                                                Generate
                                            </button>
                                        </div>
                                    </div>
                                    <div class="w-1/2">
                                        <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-2">Price</label>
                                        <div class="relative rounded-md shadow-sm">
                                            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4">
                                                <span class="text-gray-500 sm:text-sm">$</span>
                                            </div>
                                            <input type="number" name="price" id="productPrice" required step="0.01" min="0" 
                                                oninput="calculateDiscountedPrice()"
                                                class="block w-full pl-8 pr-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                        </div>
                                    </div>
                                    <div class="w-1/2">
                                        <label for="discountPercentage" class="block text-sm font-medium text-gray-700 mb-2">Discount</label>
                                        <div class="relative rounded-md shadow-sm">
                                            <input type="number" name="discountPercentage" id="discountPercentage" min="0" max="100" step="1"
                                                oninput="calculateDiscountedPrice()"
                                                class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-4">
                                                <span class="text-gray-500 sm:text-sm">%</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="flex gap-6">
                                    <div class="w-1/2">
                                        <label for="discountStartDate" class="block text-sm font-medium text-gray-700 mb-2">Discount Start Date</label>
                                        <input type="datetime-local" name="discountStartDate" id="discountStartDate"
                                            class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                    </div>
                                    <div class="w-1/2">
                                        <label for="discountEndDate" class="block text-sm font-medium text-gray-700 mb-2">Discount End Date</label>
                                        <input type="datetime-local" name="discountEndDate" id="discountEndDate"
                                            class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                    </div>
                                </div>
                                <div class="flex gap-6 mt-4">
                                    <div class="w-1/2">
                                        <label for="discountedPrice" class="block text-sm font-medium text-gray-700 mb-2">Discounted Price</label>
                                        <div class="relative rounded-md shadow-sm">
                                            <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-4">
                                                <span class="text-gray-500 sm:text-sm">$</span>
                                            </div>
                                            <input type="number" name="discountedPrice" id="discountedPrice" step="0.01" step="0.01" min="0"
                                                   class="block w-full pl-8 pr-4 py-3 rounded-md border-2 bg-gray-50 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                        </div>
                                    </div>
                                    <div class="w-1/2">
                                        <label for="stockQuantity" class="block text-sm font-medium text-gray-700 mb-2">Stock Quantity</label>
                                        <input type="number" name="stockQuantity" id="stockQuantity" required min="0" step="1"
                                            class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                    </div>
                                </div>
                                <div>
                                    <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                                    <textarea name="description" id="productDescription" rows="3" required 
                                        class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out"></textarea>
                                </div>
                                <div>
                                    <label for="productImage" class="block text-sm font-medium text-gray-700 mb-2">Image URL</label>
                                    <input type="url" name="imageUrl" id="productImage" required 
                                        class="block w-full px-4 py-3 rounded-md border-2 border-gray-200 focus:border-primary focus:ring focus:ring-primary focus:ring-opacity-50 transition duration-150 ease-in-out">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-6 py-4">
                <button type="button" onclick="submitAddProduct()" 
                    class="w-full inline-flex justify-center rounded-md border-2 border-primary shadow-sm px-6 py-3 bg-primary text-base font-medium text-white hover:bg-blue-700 hover:border-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition duration-150 ease-in-out">
                    Add Product
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Cart Sidebar -->
<div id="cartSidebar" class="fixed inset-y-0 right-0 w-96 bg-white shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out z-50">
    <div class="h-full flex flex-col">
        <!-- Cart Header -->
        <div class="px-4 py-6 bg-primary text-white">
            <div class="flex items-center justify-between">
                <h2 class="text-lg font-medium">Shopping Cart</h2>
                <button onclick="closeCartSidebar()" class="text-white hover:text-gray-200">
                    <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Cart Items -->
        <div class="flex-1 overflow-y-auto px-4 py-6">
            <div id="cartItemsList" class="space-y-6">
                <!-- Cart items will be loaded here -->
                <div class="text-center text-gray-500">Loading cart items...</div>
            </div>
        </div>

        <!-- Cart Footer -->
        <div class="border-t border-gray-200 px-4 py-6">
            <div class="flex justify-between text-base font-medium text-gray-900 mb-4">
                <p>Subtotal</p>
                <p id="cartSubtotal">$0.00</p>
            </div>
            <button onclick="proceedToCheckout()" class="w-full bg-primary text-white px-6 py-3 rounded-md shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                Proceed to Checkout
            </button>
        </div>
    </div>
</div>

<!-- Cart Overlay -->
<div id="cartOverlay" onclick="closeCartSidebar()" class="fixed inset-0 bg-black bg-opacity-50 hidden z-40"></div>

@section Scripts {
    <script>
        console.log('Script starting...');
        let debounceTimeout;
        const apiBaseUrl = 'http://localhost:7241';
        console.log('API Base URL:', apiBaseUrl);
        let cartItemCount = 0;
        let userId = localStorage.getItem('userId') || generateUserId();
        let currentPage = 1;
        let totalPages = 1;
        let currentSearchTerm = '';

        function generateUserId() {
            const newUserId = 'user_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('userId', newUserId);
            return newUserId;
        }

        // Initialize page when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, initializing...');
            initializePage();
        });

        function initializePage() {
            console.log('Initializing page...');
            fetchProducts(); // First fetch products
            updateDashboardCounts(); // Then update dashboard
        }

        // Call initializePage immediately if DOM is already loaded
        if (document.readyState === 'complete' || document.readyState === 'interactive') {
            console.log('DOM already loaded, initializing immediately...');
            initializePage();
        }

        function handleSearch(searchTerm) {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                fetchProducts(searchTerm);
            }, 300);
        }

        async function updateDashboardCounts() {
            try {
                const [productsResponse, vendorsResponse, uniqueProductsResponse] = await Promise.all([
                    fetch(`${apiBaseUrl}/api/products/count`),
                    fetch(`${apiBaseUrl}/api/vendors/count`),
                    fetch(`${apiBaseUrl}/api/products/unique-count`)
                ]);

                const countsDiv = document.querySelectorAll('.bg-primary .opacity-80');
                
                if (productsResponse.ok) {
                    const count = await productsResponse.json();
                    countsDiv[0].textContent = count;
                }
                if (vendorsResponse.ok) {
                    const count = await vendorsResponse.json();
                    countsDiv[1].textContent = count;
                }
                if (uniqueProductsResponse.ok) {
                    const count = await uniqueProductsResponse.json();
                    countsDiv[2].textContent = count;
                }
            } catch (error) {
                console.error('Error updating dashboard counts:', error);
            }
        }

        function openCart() {
            fetchCartCount(); // Only fetch cart when cart button is clicked
            // Add your cart opening logic here
            showNotification('Cart functionality coming soon!', 'info');
        }

        async function fetchCartCount() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/cart/${userId}`);
                if (response.ok) {
                    const cart = await response.json();
                    cartItemCount = cart.reduce((total, item) => total + item.quantity, 0);
                    updateCartBadge();
                }
            } catch (error) {
                console.error('Error fetching cart:', error);
            }
        }

        function updateCartBadge() {
            const cartBadge = document.getElementById('cartBadge');
            if (cartBadge) {
                cartBadge.textContent = cartItemCount;
                cartBadge.classList.toggle('hidden', cartItemCount === 0);
            }
        }

        function openAddProductModal() {
            document.getElementById('addProductModal').classList.remove('hidden');
        }

        function closeAddProductModal() {
            document.getElementById('addProductModal').classList.add('hidden');
            document.getElementById('addProductForm').reset();
        }

        async function submitAddProduct() {
            const form = document.getElementById('addProductForm');
            const formData = new FormData(form);
            const product = Object.fromEntries(formData.entries());
            
            // Convert numeric fields to proper types
            product.price = parseFloat(product.price) || 0;
            product.discountPercentage = parseFloat(product.discountPercentage) || 0;
            product.stockQuantity = parseInt(product.stockQuantity) || 0;
            
            // Handle discount dates
            if (product.discountPercentage > 0) {
                if (!product.discountStartDate) {
                    product.discountStartDate = new Date().toISOString();
                }
                if (!product.discountEndDate) {
                    product.discountEndDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString();
                }
            } else {
                product.discountStartDate = null;
                product.discountEndDate = null;
            }
            
            // Calculate discounted price
            if (product.discountPercentage > 0 && product.discountPercentage <= 100) {
                product.discountedPrice = product.price - (product.price * (product.discountPercentage / 100));
            } else {
                product.discountedPrice = null;
            }
            
            try {
                const response = await fetch(`${apiBaseUrl}/api/products`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(product)
                });

                if (response.ok) {
                    closeAddProductModal();
                    fetchProducts();
                    showNotification('Product added successfully!', 'success');
                } else {
                    const errorData = await response.json();
                    console.error('Error adding product:', errorData);
                    showNotification('Failed to add product. Please check all fields.', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('An error occurred. Please try again.', 'error');
            }
        }

        async function fetchProducts(searchTerm = '', page = 1) {
            console.log('Fetching products with searchTerm:', searchTerm, 'page:', page);
            currentSearchTerm = searchTerm;
            currentPage = page;
            
            const params = new URLSearchParams({
                searchTerm: searchTerm || '',
                page: page.toString(),
                pageSize: '12'
            });
            
            const grid = document.getElementById('productsGrid');
            
            if (!grid) {
                console.error('Products grid element not found!');
                return;
            }

            grid.innerHTML = '<div class="text-center text-gray-500 col-span-full">Loading products...</div>';

            try {
                const url = `${apiBaseUrl}/api/products?${params}`;
                console.log('Making API request to:', url);
                
                const response = await fetch(url);
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);
                }
                
                const data = await response.json();
                console.log('Products data received:', data);

                if (!data) {
                    throw new Error('No data received from API');
                }

                // Update pagination state
                totalPages = Math.ceil(data.totalItems / 12); // Calculate total pages based on total items
                currentPage = page;
                
                // Update products grid
                updateProductsGrid(data.items || []);
                
                // Update pagination UI
                updatePagination();
                
                // Update results count
                updateResultsCount(data.totalItems || 0, currentPage, data.items?.length || 0);
                
            } catch (error) {
                console.error('Error fetching products:', error);
                grid.innerHTML = `
                    <div class="text-center text-red-500 col-span-full">
                        <p>Error loading products</p>
                        <p class="text-sm mt-2">${error.message}</p>
                        <button onclick="fetchProducts(currentSearchTerm, currentPage)" class="mt-4 text-white bg-primary px-4 py-2 rounded">
                            Try Again
                        </button>
                    </div>
                `;
            }
        }

        function updateProductsGrid(products) {
            console.log('Starting to update products grid with', products.length, 'products');
            const grid = document.getElementById('productsGrid');
            
            if (!grid) {
                console.error('Products grid element not found in updateProductsGrid');
                return;
            }

            if (products.length === 0) {
                console.log('No products to display');
                grid.innerHTML = '<div class="text-gray-500 text-center py-8 col-span-full">No products found</div>';
                return;
            }

            console.log('Building product grid HTML');
            const productsHtml = products.map(product => {
                console.log('Processing product:', product);
                return `
                    <div class="group relative bg-white p-4 rounded-lg shadow-sm">
                        <div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-80">
                            <img src="${product.imageUrl || ''}" 
                                 alt="${product.name || 'Product'}"
                                 class="h-full w-full object-cover object-center lg:h-full lg:w-full">
                        </div>
                        <div class="mt-4 flex justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-900">
                                    ${product.name || 'Unnamed Product'}
                                </h3>
                                <p class="mt-1 text-sm text-gray-500">${product.description || 'No description available'}</p>
                            </div>
                            <div class="text-right">
                                <p class="text-sm font-medium text-gray-900">
                                    ${product.discountedPrice 
                                        ? `<span class="line-through text-gray-500">$${(product.price || 0).toFixed(2)}</span><br>
                                           <span class="text-red-600">$${product.discountedPrice.toFixed(2)}</span>`
                                        : `$${(product.price || 0).toFixed(2)}`}
                                </p>
                                ${(product.stockQuantity <= 5 && product.stockQuantity > 0)
                                    ? `<p class="text-xs text-red-500 mt-1">Only ${product.stockQuantity} left!</p>`
                                    : ''}
                            </div>
                        </div>
                        <button type="button" 
                                onclick="addToCart(${product.id})"
                                class="mt-4 flex w-full items-center justify-center rounded-md border border-transparent bg-primary px-8 py-2 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                                ${(!product.stockQuantity || product.stockQuantity <= 0) ? 'disabled' : ''}>
                            ${(!product.stockQuantity || product.stockQuantity <= 0) ? 'Out of Stock' : 'Add to Cart'}
                        </button>
                    </div>
                `;
            }).join('');

            console.log('Setting grid HTML');
            grid.innerHTML = productsHtml;
            console.log('Grid update complete');
        }

        async function addToCart(productId) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/cart/${userId}/items`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        productId: productId,
                        quantity: 1
                    })
                });
                
                if (response.ok) {
                    showNotification('Product added to cart!', 'success');
                    fetchCartCount(); // Update cart count after adding item
                } else {
                    showNotification('Failed to add product to cart.', 'error');
                }
            } catch (error) {
                console.error('Error adding product to cart:', error);
                showNotification('An error occurred. Please try again.', 'error');
            }
        }

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg ${
                type === 'success' ? 'bg-green-500' : type === 'info' ? 'bg-blue-500' : 'bg-red-500'
            } text-white`;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        function updatePagination() {
            const paginationContainer = document.getElementById('paginationContainer');
            const paginationNumbers = document.getElementById('paginationNumbers');
            const prevButton = document.getElementById('prevPage');
            const nextButton = document.getElementById('nextPage');
            
            if (!paginationContainer || !paginationNumbers || !prevButton || !nextButton) return;
            
            console.log('Updating pagination. Total pages:', totalPages, 'Current page:', currentPage);
            
            // Hide pagination if only one page
            if (totalPages <= 1) {
                paginationContainer.classList.add('hidden');
                return;
            } else {
                paginationContainer.classList.remove('hidden');
            }

            // Update prev/next buttons
            prevButton.disabled = currentPage <= 1;
            nextButton.disabled = currentPage >= totalPages;
            
            // Add click handlers for prev/next
            prevButton.onclick = () => {
                if (currentPage > 1) {
                    fetchProducts(currentSearchTerm, currentPage - 1);
                }
            };
            nextButton.onclick = () => {
                if (currentPage < totalPages) {
                    fetchProducts(currentSearchTerm, currentPage + 1);
                }
            };
            
            // Generate page numbers
            let pagesHtml = '';
            
            // Function to add page button
            const addPageButton = (pageNum) => `
                <button
                    onclick="fetchProducts('${currentSearchTerm}', ${pageNum})"
                    class="relative inline-flex items-center px-4 py-2 text-sm font-semibold ${
                        pageNum === currentPage
                            ? 'z-10 bg-primary text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary'
                            : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0'
                    }"
                >
                    ${pageNum}
                </button>
            `;

            // Always show first page
            if (currentPage > 1) {
                pagesHtml += addPageButton(1);
            }

            // Add ellipsis after first page if needed
            if (currentPage > 3) {
                pagesHtml += '<span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300">...</span>';
            }

            // Add pages around current page
            for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
                pagesHtml += addPageButton(i);
            }

            // Add ellipsis before last page if needed
            if (currentPage < totalPages - 2) {
                pagesHtml += '<span class="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-700 ring-1 ring-inset ring-gray-300">...</span>';
            }

            // Add last page if not already shown
            if (currentPage < totalPages) {
                pagesHtml += addPageButton(totalPages);
            }

            paginationNumbers.innerHTML = pagesHtml;
        }

        function updateResultsCount(totalItems, currentPage, currentPageItems) {
            const resultsText = document.querySelector('.text-sm.text-gray-500.mb-4');
            if (!resultsText) return;
            
            const start = (currentPage - 1) * 12 + 1;
            const end = start + currentPageItems - 1;
            resultsText.textContent = `Showing ${start}-${end} of ${totalItems} results`;
        }

        // Initialize search input handler
        document.getElementById('searchInput')?.addEventListener('input', (e) => {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                fetchProducts(e.target.value, 1); // Reset to first page on search
            }, 300);
        });

        // Function to handle discount dates
        function handleDiscountDates() {
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountStartDate = document.getElementById('discountStartDate');
            const discountEndDate = document.getElementById('discountEndDate');

            if (discountPercentage > 0) {
                const now = new Date();
                const thirtyDaysFromNow = new Date(now.getTime() + (30 * 24 * 60 * 60 * 1000));
                
                // Only set dates if they're not already set
                if (!discountStartDate.value) {
                    discountStartDate.value = now.toISOString().slice(0, 16);
                }
                if (!discountEndDate.value) {
                    discountEndDate.value = thirtyDaysFromNow.toISOString().slice(0, 16);
                }

                // Enable the date fields
                discountStartDate.disabled = false;
                discountEndDate.disabled = false;
            } else {
                // Clear and disable the date fields
                discountStartDate.value = '';
                discountEndDate.value = '';
                discountStartDate.disabled = true;
                discountEndDate.disabled = true;
            }
        }

        function calculateDiscountedPrice() {
            const price = parseFloat(document.getElementById('productPrice').value) || 0;
            const discountPercentage = parseFloat(document.getElementById('discountPercentage').value) || 0;
            const discountedPriceInput = document.getElementById('discountedPrice');
            
            if (price <= 0 || discountPercentage < 0 || discountPercentage > 100) {
                discountedPriceInput.value = price.toFixed(2);
                handleDiscountDates(); // Handle dates when discount changes
                return;
            }
            
            const discountedPrice = price - (price * (discountPercentage / 100));
            discountedPriceInput.value = discountedPrice.toFixed(2);

            // Handle discount dates
            handleDiscountDates();
            
            return discountedPrice.toFixed(2);
        }

        // Add event listeners for discount-related fields
        document.addEventListener('DOMContentLoaded', function() {
            const discountPercentageInput = document.getElementById('discountPercentage');
            const discountStartDate = document.getElementById('discountStartDate');
            const discountEndDate = document.getElementById('discountEndDate');

            if (discountPercentageInput) {
                discountPercentageInput.addEventListener('input', calculateDiscountedPrice);
            }

            if (discountStartDate && discountEndDate) {
                // Ensure end date is always after start date
                discountStartDate.addEventListener('change', function() {
                    if (discountEndDate.value && discountStartDate.value > discountEndDate.value) {
                        discountEndDate.value = discountStartDate.value;
                    }
                    discountEndDate.min = discountStartDate.value;
                });

                // Ensure start date is always before end date
                discountEndDate.addEventListener('change', function() {
                    if (discountStartDate.value && discountEndDate.value < discountStartDate.value) {
                        discountStartDate.value = discountEndDate.value;
                    }
                    discountStartDate.max = discountEndDate.value;
                });
            }
        });
    </script>
}
