@page
@model IndexModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Home page";
}

<div class="bg-white">
    <div class="mx-auto max-w-2xl px-4 py-6 sm:px-6 lg:max-w-7xl lg:px-8">
        <!-- Top section with blue cards -->
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-3 mb-8">
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Total Products</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all products in our store</p>
                    </div>
                </div>
            </div>
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Total Vendor</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all vendors in our store</p>
                    </div>
                </div>
            </div>
            <div class="bg-primary rounded-lg p-4 text-white">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-400 bg-opacity-30 rounded-lg mr-3">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium">Unique Products</h3>
                        <p class="text-sm opacity-80">0</p>
                        <p class="text-sm opacity-80">View all unique products</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Add Product section -->
        <div class="flex flex-col sm:flex-row justify-between items-center mb-6">
            <h2 class="text-2xl font-bold tracking-tight text-gray-900">Products</h2>
            <div class="flex items-center mt-4 sm:mt-0 w-full sm:w-auto">
                <div class="relative mr-4 flex-grow sm:flex-grow-0">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
                        </svg>
                    </div>
                    <input type="text" id="searchInput" oninput="handleSearch(this.value)" class="block w-full p-2 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-white focus:ring-primary focus:border-primary" placeholder="Search products...">
                </div>
                <button type="button" onclick="openAddProductModal()" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Add Product
                </button>
                <button type="button" onclick="openCart()" class="ml-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                    </svg>
                    Cart
                    <span id="cartBadge" class="ml-2 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white bg-red-500 rounded-full hidden">0</span>
                </button>
            </div>
        </div>

        <div class="text-sm text-gray-500 mb-4">
            Showing 1-9 of 100 results
        </div>

        <!-- Products grid -->
        <div id="productsGrid" class="grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:gap-x-8">
            <!-- Products will be loaded here via JavaScript -->
            <div class="text-center text-gray-500">Loading products...</div>
        </div>
        
        <!-- Pagination controls -->
        <div class="flex items-center justify-center mt-8">
            <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                <button id="prevPage" class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                    <span class="sr-only">Previous</span>
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
                    </svg>
                </button>
                <div id="paginationNumbers" class="flex">
                    <!-- Page numbers will be inserted here -->
                </div>
                <button id="nextPage" class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                    <span class="sr-only">Next</span>
                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                    </svg>
                </button>
            </nav>
        </div>
    </div>
</div>

<!-- Add Product Modal -->
<div id="addProductModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" onclick="closeAddProductModal()"></div>

        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">Add New Product</h3>
                        <div class="mt-4">
                            <form id="addProductForm" class="space-y-4">
                                <div>
                                    <label for="productName" class="block text-sm font-medium text-gray-700">Title</label>
                                    <input type="text" name="name" id="productName" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                                </div>
                                <div>
                                    <label for="productDescription" class="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea name="description" id="productDescription" rows="3" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm"></textarea>
                                </div>
                                <div>
                                    <label for="productPrice" class="block text-sm font-medium text-gray-700">Price</label>
                                    <div class="relative mt-1 rounded-md shadow-sm">
                                        <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                                            <span class="text-gray-500 sm:text-sm">$</span>
                                        </div>
                                        <input type="number" name="price" id="productPrice" required step="0.01" min="0" class="block w-full rounded-md border-gray-300 pl-7 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                                    </div>
                                </div>
                                <div>
                                    <label for="productImage" class="block text-sm font-medium text-gray-700">Image URL</label>
                                    <input type="url" name="imageUrl" id="productImage" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" onclick="submitAddProduct()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm">
                    Add Product
                </button>
                <button type="button" onclick="closeAddProductModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log('Script starting...');
        let debounceTimeout;
        const apiBaseUrl = 'http://localhost:7241';
        let cartItemCount = 0;
        let userId = localStorage.getItem('userId') || generateUserId();

        function generateUserId() {
            const newUserId = 'user_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('userId', newUserId);
            return newUserId;
        }

        // Ensure DOM is loaded before attaching event listeners
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePage);
        } else {
            initializePage();
        }

        function initializePage() {
            console.log('Initializing page...');
            fetchProducts();
            updateDashboardCounts();
        }

        function openCart() {
            fetchCartCount(); // Only fetch cart when cart button is clicked
            // Add your cart opening logic here
            showNotification('Cart functionality coming soon!', 'info');
        }

        async function updateDashboardCounts() {
            try {
                const [productsResponse, vendorsResponse, uniqueProductsResponse] = await Promise.all([
                    fetch(`${apiBaseUrl}/api/products/count`),
                    fetch(`${apiBaseUrl}/api/vendors/count`),
                    fetch(`${apiBaseUrl}/api/products/unique-count`)
                ]);

                const countsDiv = document.querySelectorAll('.bg-primary .opacity-80');
                
                if (productsResponse.ok) {
                    const count = await productsResponse.json();
                    countsDiv[0].textContent = count;
                }
                if (vendorsResponse.ok) {
                    const count = await vendorsResponse.json();
                    countsDiv[1].textContent = count;
                }
                if (uniqueProductsResponse.ok) {
                    const count = await uniqueProductsResponse.json();
                    countsDiv[2].textContent = count;
                }
            } catch (error) {
                console.error('Error updating dashboard counts:', error);
            }
        }

        async function fetchCartCount() {
            try {
                const response = await fetch(`${apiBaseUrl}/api/cart?userId=${userId}`);
                if (response.ok) {
                    const cart = await response.json();
                    cartItemCount = cart.items.reduce((total, item) => total + item.quantity, 0);
                    updateCartBadge();
                }
            } catch (error) {
                console.error('Error fetching cart:', error);
            }
        }

        function updateCartBadge() {
            const cartBadge = document.getElementById('cartBadge');
            if (cartBadge) {
                cartBadge.textContent = cartItemCount;
                cartBadge.classList.toggle('hidden', cartItemCount === 0);
            }
        }

        function handleSearch(searchTerm) {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(() => {
                fetchProducts(searchTerm);
            }, 300);
        }

        function openAddProductModal() {
            document.getElementById('addProductModal').classList.remove('hidden');
        }

        function closeAddProductModal() {
            document.getElementById('addProductModal').classList.add('hidden');
            document.getElementById('addProductForm').reset();
        }

        async function submitAddProduct() {
            const form = document.getElementById('addProductForm');
            const formData = new FormData(form);
            const product = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch(`${apiBaseUrl}/api/products`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(product)
                });

                if (response.ok) {
                    closeAddProductModal();
                    fetchProducts(); // Refresh the products list
                    showNotification('Product added successfully!', 'success');
                } else {
                    showNotification('Failed to add product. Please try again.', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('An error occurred. Please try again.', 'error');
            }
        }

        async function fetchProducts(searchTerm = '') {
            console.log('Fetching products...');
            const grid = document.getElementById('productsGrid');
            
            if (!grid) {
                console.error('Products grid element not found!');
                return;
            }

            grid.innerHTML = '<div class="text-center text-gray-500 col-span-full">Loading products...</div>';

            try {
                const response = await fetch(`${apiBaseUrl}/api/products?searchTerm=${encodeURIComponent(searchTerm)}&page=1&pageSize=12`);
                console.log('Products API response status:', response.status);
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('Products data received:', data);
                    
                    if (!data) {
                        console.error('No data received from API');
                        grid.innerHTML = '<div class="text-center text-red-500 col-span-full">No data received from API</div>';
                        return;
                    }

                    const items = data.items || data;  // Handle both array and object with items property
                    console.log('Products to display:', items);
                    
                    if (Array.isArray(items)) {
                        updateProductsGrid(items);
                    } else {
                        console.error('Products data is not an array:', items);
                        grid.innerHTML = '<div class="text-center text-red-500 col-span-full">Invalid data format received</div>';
                    }
                } else {
                    console.error('Failed to fetch products:', response.status, response.statusText);
                    grid.innerHTML = '<div class="text-center text-red-500 col-span-full">Failed to load products</div>';
                }
            } catch (error) {
                console.error('Error fetching products:', error);
                grid.innerHTML = '<div class="text-center text-red-500 col-span-full">Error loading products</div>';
            }
        }

        function updateProductsGrid(products) {
            console.log('Starting to update products grid with', products.length, 'products');
            const grid = document.getElementById('productsGrid');
            
            if (!grid) {
                console.error('Products grid element not found in updateProductsGrid');
                return;
            }

            if (!Array.isArray(products)) {
                console.error('Products is not an array:', products);
                grid.innerHTML = '<div class="text-center text-red-500 col-span-full">Invalid products data</div>';
                return;
            }

            if (products.length === 0) {
                console.log('No products to display');
                grid.innerHTML = '<div class="text-gray-500 text-center py-8 col-span-full">No products found</div>';
                return;
            }

            console.log('Building product grid HTML');
            const productsHtml = products.map(product => {
                console.log('Processing product:', product);
                return `
                    <div class="group relative bg-white p-4 rounded-lg shadow-sm">
                        <div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-80">
                            <img src="${product.imageUrl || ''}" 
                                 alt="${product.name || 'Product'}"
                                 onerror="this.src='https://via.placeholder.com/400x400?text=No+Image'"
                                 class="h-full w-full object-cover object-center lg:h-full lg:w-full">
                        </div>
                        <div class="mt-4 flex justify-between">
                            <div>
                                <h3 class="text-sm font-medium text-gray-900">
                                    ${product.name || 'Unnamed Product'}
                                </h3>
                                <p class="mt-1 text-sm text-gray-500">${product.description || 'No description available'}</p>
                            </div>
                            <div class="text-right">
                                <p class="text-sm font-medium text-gray-900">
                                    ${product.discountedPrice 
                                        ? `<span class="line-through text-gray-500">$${(product.price || 0).toFixed(2)}</span><br>
                                           <span class="text-red-600">$${product.discountedPrice.toFixed(2)}</span>`
                                        : `$${(product.price || 0).toFixed(2)}`}
                                </p>
                                ${(product.stockQuantity <= 5 && product.stockQuantity > 0)
                                    ? `<p class="text-xs text-red-500 mt-1">Only ${product.stockQuantity} left!</p>`
                                    : ''}
                            </div>
                        </div>
                        <button type="button" 
                                onclick="addToCart(${product.id})"
                                class="mt-4 flex w-full items-center justify-center rounded-md border border-transparent bg-primary px-8 py-2 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
                                ${(!product.stockQuantity || product.stockQuantity <= 0) ? 'disabled' : ''}>
                            ${(!product.stockQuantity || product.stockQuantity <= 0) ? 'Out of Stock' : 'Add to Cart'}
                        </button>
                    </div>
                `;
            }).join('');

            console.log('Setting grid HTML');
            grid.innerHTML = productsHtml;
            console.log('Grid update complete');
        }

        async function addToCart(productId) {
            try {
                const response = await fetch(`${apiBaseUrl}/api/cart/items`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: userId,
                        productId: productId,
                        quantity: 1
                    })
                });
                
                if (response.ok) {
                    showNotification('Product added to cart!', 'success');
                    fetchCartCount(); // Update cart count after adding item
                } else {
                    showNotification('Failed to add product to cart.', 'error');
                }
            } catch (error) {
                console.error('Error adding product to cart:', error);
                showNotification('An error occurred. Please try again.', 'error');
            }
        }

        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg ${
                type === 'success' ? 'bg-green-500' : type === 'info' ? 'bg-blue-500' : 'bg-red-500'
            } text-white`;
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }
    </script>
}
